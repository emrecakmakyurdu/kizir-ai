Program Code|Program Short Name|Program Long Name|Course Code|Credit|ECTS Credit|Course Section|Capacity|Language of Instruction|Start Hour1|End Hour1|Day1|Instructor Name|Level of Study|Prerequisite|Course Objectives|Course Content|Course Learning Outcomes
905|SM|SOFTWARE MANAGEMENT|9050590|0|10|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Not Available|Not Available|Not Available
905|SM|SOFTWARE MANAGEMENT|9050528|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|By the end of the course the students willknow principles of software architectureunderstand the role of software architecture in a software engineering projectknow software architectural patterns and stylesknow and apply software architecture design tecniquesknow and use software architecture modeling notationsanalyze software architecturesimplement software architectures|Fundamental concepts of software architecture. The role of architecture in software engineering. Designing applications from an architecture-centric perspective. Architecture design techniques and approaches. Architectural styles and patterns. Implementation and deployment. Software architecture modeling and architecture documentation.|Student, who passed the course satisfactorily will have the knowledge and skills todefine the key terms and concepts related to software architectureunderstand the role of software architecture in the software engineering activitiesunderstand and reason about the architecture of a software systemapply analysis techniques at the architectural levelapply architectural patterns to create architectural alternatives and choose the best alternativebe familiar with modeling notations used for capturing the design decisions that constitute an architecturedocument the architecture of a software systemconvert architectural design decisions to implementationapply architecture-centric development within the context of specific domains
905|SM|SOFTWARE MANAGEMENT|9050504|0|10|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. SEMİH BİLGEN|Graduate|Not Available|Course objective 1: By the end of the course the students will practice their software/system engineering knowledge and skills in an information systems project.Course objective 2: By the end of the course the students will understand how to use software/system engineering practices.Course objective 3: By the end of the course the students will participate in a semester-long groupwork development activity.|The course is designed for students to gain an understanding of issues of a real-world software project and enable them to apply their newly learned skills in a practical context. Students will be grouped into teams to undertake a software project with the tools, techniques and skills acquired during their previous course work. Each team will work as a software development group and assume the role of a quality assurance team for another group. The team will be assigned to a client and will interact with that client to engineer requirements, agree upon a design and achieve a successful acceptance test of a software system. Teams will meet on predetermined milestones with their faculty and quality assurance groups to discuss review results and progress.|Course learning outcome 1: By the end of the course the students would be able to perform IS requirements specification, design, project management and implementation tasks in real-world projects.Course learning outcome 2: By the end of the course the students would be able to use their software/system engineering knowledge and skills in IS development.Course learning outcome 3: By the end of the course the students would be able to apply software/system engineering practices in IS projects.Course learning outcome 4: By the end of the course the students would be able to cooperate and communicate in an IS development project involving several stakeholders (e.g. peer team members, customers, quality teams).Course learning outcome 5: By the end of the course the students would be able to demonstrate their groupwork skills in real-world projects.
905|SM|SOFTWARE MANAGEMENT|9050512|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|This course is designed as an entry level Java programming and data structures course for students who doesn't have prior programming experience.Course is composed of two parts, Object Oriented Programming and Data Structures.In the first part, an introduction to object oriented programming is given. Students will learn  Java programming language and will be able to write code to solve basic programming problems.Second part is about algorithms and data structures. Students will learn the commonly used ways to represent data in the computer like arrays, trees, linked-lists, hash tables, stacks and queues. An introduction to asymptotic algorithm analysis will be given. Students will learn examples of sorting algorithms and be able to insert, delete, search and process data.|The basic object oriented principles will be discussed using a modern programming language i.e. Java. The theory will be used in practice to implement data structures which is very important in algorithm development.|Student, who passed the course satisfactorily will be able to:Write basic level of Java programming language codesDesign object oriented solutions for simple problemsUnderstand asymptotic algorithm analysis and Big Oh notationHave understanding for basic data structures like arrays, lists, trees, hash tables, stacks, queues etc.
905|SM|SOFTWARE MANAGEMENT|9050524|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|In the scope of this course, advanced software testing techniques will be examined. In particular, the important phases of testing will be reviewed, emphasizing on the significance of each phase when testing different types of software. Students will gain awareness about testing concepts regarding the roles of testing organization as test analysts, testers and test managers. The activities related to testing will be examined through the lifecycle of a software project. The test process improvement concepts will also be introduced.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050549|0|8|0|0|English|Not Available|Not Available|Not Available|Lecturer MEHMET CÜNEYT ÜVEY|Masters|Not Available|Not Available|Contemporary issues about IT Governance as a whole; but major concentration upon IT Organization, IT Management, IT Processes,|Not Available
905|SM|SOFTWARE MANAGEMENT|9050548|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|This course summarizes computer systems from a programmers perspective and it is for students with no backgrounds in logic design, computer organization and computer architecture. Starting with a program in a high level language, all stages from compilation, assembly and execution of instructions in hardware level are covered. More advanced topics such as pipelining and cache memories are also discussed. The students who finish the course can write better programs since they will be able to understand better how the computer programs are executed.|Not Available
905|SM|SOFTWARE MANAGEMENT|9090538|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|Review of 2D basics,3-D models and geometric transformations. Graphics standards (PHIGS,GKS) and user interface standards(XWindows).Solid modeling. Illumination and shading. Fracta models. Animation.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050525|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|Fundamental concepts of software product lines are introduced.These include commonality and variability; domain and application management; variability modeling and management; reference architectures. Approaches to SPL development, SPL organization and SPL adaption are discussed. The concept of SPL maturity is also introduced and the Family Evaluation Framework is studied, together with case studies of hypothetical and real life organizations.|Not Available
905|SM|SOFTWARE MANAGEMENT|9090522|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. HÜSEYİN HACIHABİBOĞLU|Graduate|Not Available|Manual generation of game assets is a time consuming and costly process. In addition fixed, uncontrollable assets do not allow the modification of content with interaction. Procedural content generation is the name given to the set of techniques that focus on designing models that can be parametrically controlled. Procedural content generation and design are slowly becoming the norm in game development. The major advantage of procedural sound design is the substantial reduction in the effort required to record sounds. In addition it allows the game designer to avoid repetition by parametrically modifying the sound synthesis algorithms and the sounds that they generate in effect.The objective of this course is to equip the students with the knowledge, skills and tools needed to generate natural sounding, parametrically controllable artificial sound synthesis algorithms and sound effects.|Games are interactive applications and game worlds change with interaction. Audio content in games and virtual reality are typically canned recordings that are impossible to modify during runtime, preventing interactivity, causing repetition and increasing the memory footprint. Procedural audio generation by using interactive synthesis algorithms is a solution to circumvent these problems. This course aims to introduce the students to the concepts and underpinnings of procedural audio as well as give them the practical knowhow on procedural sound design for games.|Upon successful completion of this course the students will:learn the basic concepts of procedural sound design,learn the basics of human auditory system, auditory cognition, auditory memorylearn to use the Pure Data graphical programming languagelearn the basic artificial sound synthesis techniqueslearn to carry out modular analysis on sounding objects and combine different components in a meaningful and systematic waylearn about event-based parametric sound synthesis modelsgain practical experience in designing a variety of sound effects that can be used in gamesdesign, test, and deploy their first parametric sound synthesis model
905|SM|SOFTWARE MANAGEMENT|9050591|0|5|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|By the end of the course the students will knowkey terms and concepts of software domain,basic software development activities,tools and techniques used in software development.|An introduction to the basic concepts of software domain. Requirements analysis, software architecture, software design, implementation technologies, verification, validation and software modelling.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050704|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|By the end of the course the students will knowThe basic concepts of SOA and web servicesThe standards related to web servicesDifferent architectural design approaches to develop enterprise applications|This course introduces the basic concepts, principles, and techniques for service-oriented architectures (SOA)and Web services, specifically SOAP and RESTful web services. Primary topics include design and implementation of SOA based applications, development frameworks, service composition, data integration techniques, and deployment of service providers and consumers. Relevant topics such as web service security, cloud computing, BPM and blockchain are also covered.|By the end of the course the students will gain the ability toapply process and data integration techniques to develop SOA based applicationsapply REST architecture design, develop and test web services
905|SM|SOFTWARE MANAGEMENT|9090505|0|8|0|0|English|Not Available|Not Available|Not Available|Assoc.Prof.Dr. ELİF SÜRER|Masters|Not Available|The course aims to present a historical and technical knowledge in evolution of video games. Major topics related with game development and design will be covered that give the students insight on this field and help them select their elective courses more consciously. Design components and processes, recent techniques in game development, widely accepted software and game engines and special topics in the field will be covered in the scope of the course. Having knowledge on these issues will give students the chance to select a specialization area to concentrate on, with awareness on all important concepts of game design, development and production.|The course aims to present a historical and technical knowledge in evolation of video games. Major topics related with game development and design will be covered that give the students an insight on this field and help them select their elective courses more consciosly. Recent techniques in game development, widely accepted software and game engines, special topics in the field will be covered in the scope of the course. Having knowledge on these issues will give students the chance to select a specilization area to concentrate on, w,th awareness on all important concepts of game design, development and production, so recieve a higher quality education.|On completion of this course,the learner will have in-depth knowledge of game componentsthe learner will be able to critically analyze existing gamesthe learner will be able to design and develop a new game and implement effective design, production and testing techniques through all phases of game development
905|SM|SOFTWARE MANAGEMENT|9050563|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Business Process Management (BPM) is the set of concepts, methods, tools and techniques surrounding the definition, implementation, measurement and improvement of business processes in organizations. This course aims to familiarize the students with the key concepts of BPM. The students will learn the tools and the methodologies of business process modelling. Another objective is to introduce the students the awareness of business process improvement and business process redesign. By the end of this course, the students will be able to understand business processes from a general perspective and learn tools, frameworks and principles for managing them.|Business process management life cycle. Business process modeling. Business process discovery. Business process analysis. Business process improvement. Business process redesign. Business process automation. Business process monitoring and control. Process intelligence.|This course aims to enable students atunderstanding the phases of business process management lifecycleidentifying and modelling business processes using BPMNanalysing and monitoring business process modelsautomating process models through BPMS
905|SM|SOFTWARE MANAGEMENT|9090513|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Via this course and by the successful completion thereof, the students will:Learn the fundamental algorithms that are used in interactive systems such as games, AR, VR, and MR applicationsUnderstand the proper use of variants of different algorithms as well as their interactionsImprove their algorithm development skills without getting hindered by lower level programming languages.Develop an interactive application using some of the algorithms taught during the course.|A practical understanding of algorithms is necessary to develop interactive systems such as games, virtual/augmented/mixed reality and other interactive applications. This course aims to teach algorithms relevant in the context of designing interactive systems. The topics to be covered include random number generation, noise generation, procedural content generation, tournament modelling, game trees, path finding, group movement modelling, decision making and modelling uncertainty. Networking related topics will also be covered. The course is predominantly practical where the algorithms and their use will be described and implementation of major algorithms will be demonstrated with collaborative coding tools in class using Python. The assessment will be via programming assignments and a term project.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050522|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|By the end of the course the students are expected to acquire knowledge aboutagile manifesto values, principles and how to interpret these values and principlesagile methods (Scrum, XP, KanBan, TDD and DAD) and the associated agile practices for higher software product quality, productivity, employee and customer satisfaction, and timely release of products to market.By the end of the course the students will gain the ability toimplement the agile methods and practices based on specific purposes in software organisationsinitiate and manage an agility improvement program in a software development organisation|This course aims at teaching the values and principles of agile software development teams and the agile practices for successful delivery of software products. From this perspective, the course covers a wide range of ASD methods and practices in relation to different areas and specific processes of software development. The primary ASD methods that will be covered in this course will include Scrum, Extreme Programming (XP), Test Driven Development (TDD), KanBan, and Disciplined Agile Delivery (DAD). The course not only covers the Agile Methods and Practices, but also introduces how to get started implementing Agile in software projects.|By the end of this course the students will be able toUnderstand why Agile Software Development (ASD) is needed in software projects.Distinguish essential software project characteristics to implement ASD.Interpret the Agile Values and Principles.Specify alternative ASD solutions to software development issues such as low product quality, late and out of budget product delivery, and unsatisfied customers.Initiate agility improvement programs in software development organisations.
905|SM|SOFTWARE MANAGEMENT|9050703|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|This course provides the essential knowledge on the DevOps concepts and skills. Starting with an introduction to what is DevOps and the DevOps culture, the course covers the necessary components of the DevOps lifecycle, build automation, continuous integration and continuous delivery, infrastructure as code, configuration management, orchestration and monitoring. The course covers the microservices architecture and the DevOps pipeline. The relationship with cloud computing and DevOps is described with hands-on examples different cloud platforms.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050502|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|By the end of this course the students will know necessary skills and tools to manage software projects and prepare software project management plan, and students will be able to demonstrate their knowledge through a project management plan prepared as a group project.|methods used in managing software development. Topics will include software project planning and control, subcontract management, configuration management, risk management and organizing and managing software teams and commitment management.|Students who passed the course satisfactorily will gain detailed knowledge, and will be able to produce related outputs, about:Project Management BasicsProject Management Performance DomainsStakeholder Performance DomainTeam Performance DomainDevelopment Approach and Software Life Cycle DomainPlanning Performance DomainDelivery Performance DomainMeasurement Performance DomainUncertainity Performance DomainSoftware Project Management StandardsIEEE Standard for Software Project Management PlansProcess Tailoring for Project ManagementCommonly Used Models, Methods and Artifacts in Software Project Management
905|SM|SOFTWARE MANAGEMENT|9050514|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Students will become familiar with quality concepts, learn various test techniques, and will be able to plan test activities, use project management techniques to track the progress of test execution, and will learn how to analyze test metrics to improve the testing process.|The Relationship Of Software Testing To Quality Is Examined With An Emphasis On Testing Techniques. Topics Include Module And Unit Testing, Integration And Acceptance Testing, Statistical Testing Methods, Defining Test Plans And Strategies That Map To System Requirements. Testing Principles, Formal Models Of Testing And Software Testing Standards Are Also Examined.|Students who successfully completing this course will:Have a good understanding of software quality and testing conceptsBe able to select the right technique to generate test casesBe able to write test documentation using standardsBe able to plan, track, and complete test activitiesBe able to use test metrics effectively to manage and improve testing processApply the right tools for test management and automation
905|SM|SOFTWARE MANAGEMENT|9050515|0|8|0|0|English|Not Available|Not Available|Not Available|Assist.Prof.Dr SADIK EŞMELİOĞLU|Graduate|Not Available|Not Available|The course introduces software verification and validation techniques and tools. The course focuses on audit, review, inspection and walkthrough techniques and tools used for implementation. It also introduces independent verification and validation process. Issues related to the installation of these processes within an organization and to the impact on software quality are also investigated. Students complete a term project to apply the techniques and tools studied.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050503|0|8|0|0|English|Not Available|Not Available|Not Available|Assoc.Prof.Dr. AYSU BETİN CAN|Graduate|Not Available|By the end of the course the students willunderstand and apply iterative incremental software developmentdraw and interpret Unified Modeling Language (UML) diagramsknow and apply evolutionary requirements analysisknow the basic concepts of object oriented analysis and object oriented designunderstand and apply the principles and guidelines on object oriented analysisunderstand and apply the basic principles and guidelines on object oriented designspecify and analyze requirements and construct object oriented software|The course introduces the fundamentals of object-oriented information system development with a focus on analysis and design phases. Data modeling and design principles such as data abstraction, information hiding, modularity, and coupling are viewed in the context of object-oriented paradigm. For object-oriented modeling Unified Modeling Language (UML) is introduced and used extensively throughout the course. Unified process is taken as the basis for development efforts. Issues relating to making the transition from other software development methodologies are examined and risks involved in object-oriented process are discussed.|By the end of the course the students will be able todefine iterative incremental software development processdefine fundamental concepts in the Unified Processuse the Unified Process in object oriented software developmentcreate requirements, analysis and design artifacts using UMLunderstand dynamic and static object modeling using UML sequence, communication and class diagram notationsinterpret UML diagramsidentify and write use cases at an appropriate level of detailrelate use case analysis to iterative development and utilize use case driven development approachdefine object oriented analysis and object oriented design and related conceptsidentify conceptual classes and model their attributes and associations to create a model of the problem domainanalyze use case scenarios to identify system operations that become starting events to design for and create contracts for system eventsunderstand the responsibility driven design (RDD) approach and create object design using RDDdesign software by using the basic object oriented design principlesassess the qualities of object design alternativesmap designs to code
905|SM|SOFTWARE MANAGEMENT|9050702|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|At the end of this course student will know the human aspects of software engineering.|The course covers the human behavioral issues affecting software development processes. Topics are investigated at three layers: individual, team, and organizational. The role of individual behavior and productivity, the concept of effective teams and the role of organizational culture in software development are discussed. Results of various research studies are presented in the context of managing human capital in software projects.|Students who pass this course succesfully will be able to state and discuss why human aspects are as important as software and hardware in companies.
905|SM|SOFTWARE MANAGEMENT|9090508|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. HÜSEYİN HACIHABİBOĞLU|Graduate|Not Available|Humans are the eventual consumers of computer games. Data from user experience during gameplay provides valuable insight into the level of satisfaction that computer games can offer. Information gathered from such data can also be used to design games that are more involving and thus commercially more profitable.Games are essentially based on interactive multimodal media which involve visual, auditory, and (sometimes) tactile aspects. While there exist many different quantitative strategies to evaluate individual modalities in isolation, interaction between different modalities as well as being in an interactive setting makes it harder to apply such strategies for evaluating user experience with games. Instead, more qualitative approaches are used for such assessments.The course aims to teach the current trends and approaches to game evaluation. The contents of the course will cover several different aspects of game metrics. A general introduction to the assessment of games will be covered first, together with Hawthorne effect which indicates behavioral modifications of “observed” subjects. Then, the statistical tools necessary to evaluate subjective results will be discussed. The implications of game metrics in the design and development of games will then be discussed. Networked, multiplayer games present another level of complexity as social interaction also takes place. Concepts of presence, involvement, and their use for evaluating games will be discussed. Some games are less approachable because of bad design. Methods that will allow games with better approachability will be discussed. Post-game experience can also be useful in determining what aspects of the game to revise and what aspects to keep. Game controllers are evolving to allow exertive games as well as augmented reality with gestural interfaces. These topics will be covered. As the median age of gamers become higher, games are being adopted by a greater segment of the society and games which used to be the domain of youngsters is now played by toddlers for education, handicapped people for therapy, and elderly people for exercise and coordination. The aspects of games with such segments of the society will also be covered. The course also has a hands-on project for the evaluation of games using the concepts learned in the course. The students will present the results of their own evaluations on off-the-shelf games during the final two weeks of the course.|Measurement of usability and user experience in games during and after game development is a process that enhances greatly the overall quality of games.It is known that even very small changes can make a big prositive(or negative) impact on user experience.It then becomes very important to develop efficient and solid stratecies to determine whether a game provides a good user experience or not.This course aims to teach the fundamentals of user experience evaluation for games.|Upon completion of the course, the students will:• learn the basic concepts related to game metrics,• how game metrics can be used during development to enhance user experience in games • obtain the necessary statistical skills to analyse results of subjective experiments• learn how to design and run subjective tests to assess computer games• improve their presentation and technical writing skills
905|SM|SOFTWARE MANAGEMENT|9090590|0|10|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|The course has two objectives:1) To prepare the students for the thesis stage by giving them practical information regarding research methods, time management, citing other researchers, plagiarism, critical reading, academic writing, presentation2) Acquainting the students with various research topics in the area of game technology by invited speakers from within the institute and beyond.|Not Available|By the completion of the course students will:1. Have the basic information about how to carry out research2. How to read critically3. How to present research results4. How to write a thesisThey will also have infomation about a number of current research topics in the area
905|SM|SOFTWARE MANAGEMENT|9050519|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Not Available|Issues relating to software procurement, contract law, specification and control of product processes are examined. Topics include software and system acquisition standards, factors that affect cost, cost estimation, cost/benefit analysis, risk analysis and legal implications with respect to ownership and use.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050523|0|8|0|0|English|Not Available|Not Available|Not Available|Assoc.Prof.Dr. AYSU BETİN CAN|Masters|Not Available|At the end of this course, the student will:know design pattern terminology and GoF design patternsuse software design patterns in appropriate context and able to justify this usebe able to evaluate object oriented designrecognize design problems and propose solutions|This course focuses on design patterns, patterns for concurrent software systems, antipatterns and recognizing design problems, refactoring bad design to patterns. Hands-on experience on reuse of design patterns will be established by a class project. The course includes reviews of UML, object-oriented design and aspect oriented design. Students will be able to efficiently communicate program structures using patterns and to develop software of high quality.|At the end of this course, the student will be able to:recall the names and classify GoF design patternsselect, justify and apply software design patterns in appropriate contextdescribe and compare design patterns in terms of their problem context, solution structure, consequencesrecognize design problems in object oriented softwareknow basic object oriented design principlesable to restructure the design/code to some extend
905|SM|SOFTWARE MANAGEMENT|9090511|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|This course aims to provide students familiar with aspects related to game aesthetics. This course aims at presenting fundamentals of visual design. Content areas include: history, basic visual design in an interactive content, world design, motion graphics and game art. Special emphasis is placed on how visual aesthetics play a role in the game experience.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050561|0|8|0|0|English|Not Available|Not Available|Not Available|Lecturer NURİ ALPAY KARAGÖZ|Graduate|Not Available|At the end of this course, the student will:know software development process modelsknow basic terminology of software engineeringunderstand modelling notationsknow requirements engineering phases and fundamentalsknow fundamentals of software project management techniques|The course introduces the fundamentals of software engineering with an emphasis on software processes, software development process models, software requirements, requirements analysis, software design, contemporary modeling notations, verification and validation, software testing and software project management.|At the end of this course, the student will be able to:describe and compare software development process modelschoose a software process model based based on project and team attributesdefine basic terminology of software engineeringdraw and interpret system models using software modelling notationsdefine requirements engineering phasesdescribe fundamental techniques for requirement phaseapply estimation techniques in project managementdefine planning activites in project  management
905|SM|SOFTWARE MANAGEMENT|9050701|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Not Available|Not Available|Not Available
905|SM|SOFTWARE MANAGEMENT|9050501|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Not Available|The course introduces the basic principles of the personal software process and help individual engineers to improve their performance by bringing discipline to the way they develop software. Students start with the PSP0 process, where they use their current programming practices. The PSP process is enhanced through seven process versions, with students writing one or two programs with each PSP version. For each program, they use the process methods just introduced, as well as all of the methods introduced with the previous process versions.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050517|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|By the end of the course the students are expected to acquire knowledge and skills onMeasurement and estimation in software engineering and why we need to measureMeasurement models and scale typesGoal-Question-Metric approachInternal and external product attributes and base and derived metrics for themHow to collect and validate dataPerformance, cost, effort measurementOther metrics for the phases of software development life cycle|Techniques of measurement within the context of software quality engineering and software project management are addressed. Metrics and quality are presented in relationship to the software process and software process maturity models. Selection of quality and project metrics is addressed in terms of the goal/question/metric paradigm as well as various quality models. Methods of storing data for historical purposes, analyzing and presenting data to others are also discussed included.|By the end of this course the students will be able tospecify appropriate metrics for software processes, products and resourcesapply these metrics to systems and software development projectsinitiate and maintain a measurement project in software projectsidentify size, effort and schedule of software project along with the other measuresunderstand what would be the best to measure in software projects while dealing with limited resources
905|SM|SOFTWARE MANAGEMENT|9050521|0|8|0|0|English|Not Available|Not Available|Not Available|Lecturer NURİ ALPAY KARAGÖZ|Graduate|Not Available|Not Available|Requirements engineering within software life-cycle. Requirements elicitation and modeling: issues and techniques. Documentation and management of requirements. Standards and CASE tools. Cognitive and socio-organizational issues.|Not Available
905|SM|SOFTWARE MANAGEMENT|9090599|0|50|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|Not Available|Not Available
905|SM|SOFTWARE MANAGEMENT|9050547|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|Introduction to Systems Engineering Management, Systems Engineering Management in Acquisition, Systems Engineering Process Overview, Requirements Analysis, Functional Analysis and Allocation, Design Synthesis, Verification, Systems Engineering Process Outputs, Work Breakdown Structure, Configuration Management, Technical Reviews and Audits, Trade Studies, Modeling and Simulation, Metrics, Risk Management; Model Based Systems Engineering, SysML, Modelica, Object Oriented Systems Engineering Methodology, Integrated Environments for Systems Engineering Methodology, Integrated Environments for Systems Engineering.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050592|0|5|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|By the end of the course the students will knowSoftware ArchitectureSoftware QualitySoftware Quality FrameworksResearch methods in software domain,|An introduction to software lifecycle processes, software process improvement, and software project management.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050526|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|Secure software development considers security as part of the development process and aims to achieve more secure software systems. This course introduces the state of the art and industrys best practices for security requirements engineering,security analysis and modeling, security patterns and testing as integrated into the software development life cycle models.|Not Available
905|SM|SOFTWARE MANAGEMENT|9090540|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|3D sensor outputs, 3D data structures, 3D data visualization, modeling of 3D data, 3D surface models (mesh and spline models), preprocessing of 3D data, 3D registration, 3D feature extraction, 3D feature descriptors, 3D object detection and recognition.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050530|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|Social network analysis is a core methodology utilising graph theory, algebra, statistics, sociometry and psychometry for a diverse field of applications. This course is intended to introduce to students how to extract information contained in a network to measure and characterize them, different types of networks, creating models of networks and predicting their behaviour. Most commonly used GUI-based software tools for measuring and displaying network data will also be introduced. The course will also focus on specific applications of the network analysis in marketing, management, epidemiology, healthcare, collective intelligence, spread of new ideas and social computing.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050589|0|20|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Not Available|Not Available|Not Available
905|SM|SOFTWARE MANAGEMENT|9090541|0|8|0|0|English|Not Available|Not Available|Not Available|Assoc.Prof.Dr. ELİF SÜRER|Graduate|Not Available|The course provides the basics of classical mechanics and numerical methods to solve typical physics problems of game programming. After a gentle introduction to game physics by presenting basic concepts, kinematics, force and kinetics, collision are given together with mathematical tools that are frequently used for physics based game programming.As computers are getting more powerful, game industry tends towards producing more “realistic” games. This course aims to build basic skills of implementing fundamental physics knowledge to produce more “realistic” games.|The course provides the basics of classical mechanics and numerical methods to solve typical physics problems of game programming. After a gentle introduction to game physics by presenting basic concepts, kinematics, force and kinetics, collision are given together with mathematical tools that are frequently used for physics based game programming. Programming studio sessions will provide an opportunity to share programming practices among participants.|On completion of this course,the learner will have in-depth knowledge of physics in computer gamesthe learner will be able to design and develop a physics enginethe learner will be able to design and develop a new game and the game will be using the physics engine implemented during the class
905|SM|SOFTWARE MANAGEMENT|9050527|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. BANU GÜNEL KILIÇ|Graduate|Not Available|Not Available|Security engineering involves software and systems engineering, mathematics, economics, psychology and social engineering. This course aims to introduce the students to the hardware and software systems that require protection; the security mechanisms currently in place to protect them and the attacks that jeopardize availability, integrity or confidentiality of information and services. Specific applications of security engineering for defence systems, financial sector, and management of health records will be discussed.|Not Available
905|SM|SOFTWARE MANAGEMENT|9090561|0|8|0|0|English|Not Available|Not Available|Not Available||Graduate|Not Available|Not Available|The course presents the theoretical basics of artificial intelligence (AI) and their application to behavior modeling in game development. The first part will introduce common AI architectures, which can be used in game design, and the second part will cover basic AI techniques towards entity behavior modeling. In the course, students will be given term papers to be read, which will be summarized and presented in the class. Additionally, the students will form groups, and each group will develop a term project involving behavior modeling in.|Not Available
905|SM|SOFTWARE MANAGEMENT|9050511|0|8|0|0|English|Not Available|Not Available|Not Available|Prof.Dr. ONUR DEMİRÖRS|Graduate|Not Available|Not Available|Introduce students the concept of software process and software process improvement through the use of software process capability models. Emphasis will be placed on the application of process concepts to industrial situations. Other topics will include software process assessment techniques, software process improvement models and process capability models in related areas.|Not Available
